servlet映射配置两种方式：
	1.servlet类上使用@WebServlet注解            参考网址：https://blog.csdn.net/tantexian/article/details/50414368
	2.web.xml中进行配置
	<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1">
  <!-- 描述信息 -->
  <display-name>jsp</display-name>
  <!-- 配置欢迎页面 -->
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
 
  <servlet>
  	<!-- servlet名称，与servlet-mapping中的servlet-name必须一致 -->
  	<servlet-name>MyServlet</servlet-name>
  	<!-- servlet类所在的包路径，即上面T所在包路径 -->
  	<servlet-class>com.yzw.servlet.MyServlet</servlet-class>
  </servlet>

  <servlet-mapping>
  	<!-- servlet名称，与上面中的servlet-name必须一致 -->
  	<servlet-name>MyServlet</servlet-name>
  	<!-- servlet过滤的路径，也就是你在jsp中访问servlet时应该在action中填写的东西 -->
  	<url-pattern>/MyServlet</url-pattern>
  </servlet-mapping>


</web-app>

创建servlet的三种方法：
	1.实现servlet接口
	2.继承GenericServlet
	3.继承HttpServlet

servlet生命周期：
	1.servlet第一次接到请求的时候，触发init函数，把servlet实例装载到内存中
	2.然后调用servlet的service函数
	3.再次访问servlet的时候，直接调用service函数
	4.当web应用reload或者关闭Tomcat都会调用destroy函数
	
	注：一个生命周期内只调用一次init函数
	
	生命过程：实例化，初始化，处理请求，退出服务。
	
	
	servlet中文乱码处理：统一编码
		1.request编码和response编码统一
		2.jsp页面编码utf-8
		3.Tomcat文件目录conf下server.xml配置URIEncoding
		<Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" URIEncoding="UTF-8"/>
        4.eclipse设置编码utf-8
        
        
	loadOnStartup :注解@WebServlet的属性，有该属性的servlet会随Tomcat启动而初始化，属性值的大小决定初始化顺序
	
	注解方式：@WebServlet(urlPatterns="/servlet2",loadOnStartup=2)
	xml配置方式：<load-on-startup>1</load-on-startup>:对应的配置的方式设置loadOnStartup值
	
	没有设置该属性时，servlet在有请求时才初始化。
	
	
	
	转发和重定向
	
		转发：
			RequestDispatcher rdp = request.getRequestDispatcher("dispatcher.jsp");
			rdp.forward(request,response);
		
		重定向：response.sendRedirect("redirect.jsp");
		
		区别：
			1.重定向时客户端的地址有变化，而转发没有；
			2.转发可以携带数据，重定向不行；
			3.重定向发生在客户端，转发发生在服务器，客户端不知道；
			4.重定向时，客户端发送了两个请求，而转发客户端只发送了一个请求（本质区别）
			
	ServletContext
		当web容器启动时，会为每个web应用程序创建一个对应的ServletContext对象，它代表当前应用
		
	获取ServletContext对象：
		this.getServletConfig().getServletContext();
		或者this.getServletContext();
		(实际使用中，重写了init方法时用this获得的ServletContext会出错)
		注：父类的 init(ServletConfig)有处理获取ServletContext对象的引用，
		在doGet/doPost/service方法方法中才能够通过 getServletContext()方法获取到SeverletContext对象！
		重写了Servlet的init方法后一定要记得调用父类的init方法，否则在service/doGet/doPost方法中使用getServletContext()方法获取ServletContext对象时就会出现java.lang.NullPointerException异常
		
		由于一个web应用中所有的servlet都共享一个ServletContext对象，因此servlet对象可以通过ServletContext对象实现通信，ServletContext对象被称为域对象。
		super.init(config);
		
		
	ServletContext对象的作用：
		1.初始化参数
		ServletConfig只能获取当前servlet的初始化参数
		ServletContext可以获取全局的初始化参数，不能获取servlet的初始化参数
		2.实现转发
		this.getServletDispatcher("/资源名").forward(request,response);
		
		
	上下文属性
		属性是一种对象，它可以通过调用ServletContext对象、HttpServletRequest对象
		HttpSession对象的setAttribute()方法设置到不同的范围，通常也叫绑定。
		
		ServletContext：整个web应用启动与关闭
		HttpSession：浏览器与服务器之间的对话的建立和结束
		HttpServletRequest：每次请求的开始于结束
		
		
	加载顺序：	
		web.xml --> filter --> listener --> servlet		
		
		
	监听器：servlet规范中定义的一种特殊的类，用于监听ServletContext、HttpSession、和ServletRequest对象的创建、销毁、属性变更、迁徙、绑定等事件。
		
